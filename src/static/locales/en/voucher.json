{
  "backBtn": "Back",
  "proceedBtn": "Next",
  "noPurposesLabel": "This client is not associated with any purpose",
  "noKeysLabel": "This client does not contain public keys",
  "choosePurposeLabel": "Choose the purpose to use",
  "purposeFailureMessage": "Warning! It will not be possible to obtain a voucher for this purpose. Service has been suspended in one or more components of the pipeline. The suspended components are:",
  "purposeFailureReason": {
    "eservice": "E-service",
    "agreement": "service request",
    "purpose": "purpose"
  },
  "title": "Simulate voucher acquisition",
  "description": "Through this feature, you can simulate obtaining a voucher. Once the parameters are selected, you can perform a client assertion, request a voucher, and check that it is compatible.",
  "step1": {
    "stepperLabel": "Parameter selection",
    "title": {
      "API": "Select public key",
      "CONSUMER": "Select purpose and public key"
    },
    "description": "Used to show you the correct parameters to populate the client assertion",
    "purposeSelectInput": {
      "label": "Choose the purpose to use"
    },
    "keySelectInput": {
      "label": "Choose the public key to use"
    },
    "goToTechnicalDocsLabel": "Go to technical documentation",
    "showCurrentSelectionIds": "View IDs for current selection",
    "currentIdsDrawer": {
      "title": "View current selection IDs",
      "subtitle": "Useful parameters to obtain information through PDND APIs. Have questions? <1>Check the guide</1>.",
      "eserviceIdDescription": "The ID of the e-service linked to the selected purpose",
      "descriptorIdDescription": "The ID of the e-service version linked to the selected purpose",
      "agreementIdDescription": "The ID of the service request linked to the selected purpose",
      "purposeIdDescription": "The ID of the selected purpose",
      "clientIdDescription": "The ID of this client",
      "producerOrganizationId": {
        "label": "organizationId (producer)",
        "description": "The ID of the producing party"
      },
      "consumerOrganizationId": {
        "label": "organizationId (consumer)",
        "description": "The ID of your party"
      }
    }
  },
  "step2": {
    "stepperLabel": "Client assertion",
    "title": "Client assertion",
    "description": {
      "label": "The first step is to create an assertion signed by your party with the private key corresponding to one of the public keys you have uploaded to this client. Below are the details to create the JWS according to the specification",
      "link": {
        "label": "RFC7521",
        "title": "Link to RFC7521 specification"
      }
    },
    "assertionHeader": {
      "title": "Assertion header",
      "kidField": {
        "label": "KID",
        "description": "The ID of the key selected in the previous step",
        "copySuccessFeedbackText": "ID successfully copied"
      },
      "algField": {
        "label": "ALG",
        "description": "The algorithm used to sign this JWT. At this time, signing is only possible with RS256",
        "copySuccessFeedbackText": "Text successfully copied"
      },
      "typField": {
        "label": "TYP",
        "description": "The type of object being sent, in this case “JWT”",
        "copySuccessFeedbackText": "Text successfully copied"
      }
    },
    "assertionPayload": {
      "title": "Assertion payload",
      "issField": {
        "label": "ISS",
        "description": "The issuer of the request; in this case, the ID of this client",
        "copySuccessFeedbackText": "ID successfully copied"
      },
      "subField": {
        "label": "SUB",
        "description": "The subject of the request; in this case, always the client ID",
        "copySuccessFeedbackText": "ID successfully copied"
      },
      "audField": {
        "label": "AUD",
        "description": "The target audience; in this case, a PDND resource",
        "copySuccessFeedbackText": "String successfully copied"
      },
      "purposeIdField": {
        "label": "PurposeId",
        "description": "The ID of the purpose selected in the previous step",
        "copySuccessFeedbackText": "ID successfully copied"
      },
      "jtiField": {
        "label": "JTI",
        "description": "A unique random (UUID) ID generated by the token creator. Used to identify the token itself",
        "suggestionLabel": "You must generate this parameter yourself. Example value: 261cd445-3da6-421b-9ef4-7ba556efda5f"
      },
      "iatField": {
        "label": "IAT",
        "description": "Issued at: the timestamp indicating the date and time when the token is created, expressed in UNIX epoch (numeric value, not string)",
        "suggestionLabel": "You must generate this parameter yourself. Example value: 1651659340"
      },
      "expField": {
        "label": "EXP",
        "description": "Expiration: the timestamp indicating the token expiration date and time, expressed in UNIX epoch (numeric value, not string)",
        "suggestionLabel": "You must generate this parameter yourself. Example value: 1651738540"
      }
    },
    "assertionScript": {
      "title": "Example for generating a client assertion",
      "steps": {
        "1": "Create a folder and name it “client_assertion_test”",
        "2": "Place the script <1>{{ filename }}</1> in the folder (Python 3.8 required)",
        "3": "Create a “keys” folder and place the private key inside, naming it “client-test-keypair.rsa.priv”",
        "4": "Open the terminal and navigate to the client_assertion_test folder",
        "5": "Paste the command below and press enter",
        "result": "This will generate a client assertion signed with your private key. Warning: the private key must match the public key you selected in the previous step."
      },
      "exampleLabel": "Example usage"
    }
  },
  "step3": {
    "stepperLabel": "Voucher",
    "title": "Voucher request",
    "consumerDescription": "Once the JWS has been signed with your private key, it must be used to make a voucher request to the PDND authorization server. If successful, a voucher usable at the producer’s e-service will be returned",
    "apiDescription": "Once the JWS has been signed with your private key, it must be used to make a voucher request to the PDND authorization server. If successful, a voucher usable at the PDND API gateway will be returned",
    "authEndpoint": {
      "label": "Authorization server endpoint",
      "copySuccessFeedbackText": "URL successfully copied"
    },
    "requestBody": {
      "title": "Request body",
      "clientIdField": {
        "label": "client_id",
        "copySuccessFeedbackText": "ID successfully copied"
      },
      "clientAssertionField": {
        "label": "client_assertion",
        "suggestionLabel": "The JWS obtained from the previous step (starts with “ey”)"
      },
      "clientAssertionTypeField": {
        "label": "client_assertion_type",
        "description": "The target audience; in this case, a PDND resource",
        "copySuccessFeedbackText": "String successfully copied"
      },
      "grantTypeField": {
        "label": "grant_type",
        "copySuccessFeedbackText": "String successfully copied"
      }
    },
    "voucherScript": {
      "title": "Example cURL",
      "guide": "Open the terminal, replace the placeholder YOUR_CLIENT_ASSERTION with the assertion you obtained in the previous step, and run the cURL. If you don’t have cURL, <1>you can install it</1> via Brew.",
      "exampleLabel": "Example cURL"
    },
    "debugVoucherAlert": {
      "description": "Unable to obtain a valid voucher? Try the",
      "link": {
        "label": "debug feature"
      }
    }
  },
  "step4": {
    "consumerStepperLabel": "E-service access",
    "apiStepperLabel": "API Interop access",
    "actionLabel": "Download",
    "CONSUMER": {
      "title": "Congratulations!",
      "description": "You can now access the API of the e-service <strong>{{ eserviceName }}</strong> produced by <strong>{{ producerName }}</strong> ",
      "actionTitle": "E-service page",
      "actionDescription": "You can access the data made available by the producer",
      "actionLabel": "Go to e-service page"
    },
    "API": {
      "title": "Congratulations!",
      "description": "You can now access the PDND APIs",
      "actionTitle": "PDND",
      "actionDescription": "The API that allows parties to interact with PDND in machine-to-machine mode",
      "titleSignalHub": "Signal Hub",
      "actionLabel": "Download",
      "apiV1": {
        "title": "API v.1 (deprecated)",
        "description": "The API version currently in use and being deprecated."
      },
      "apiV2": {
        "title": "API v.2 (recommended)",
        "description": "The most recent API version as the new standard for machine-to-machine communications to Interoperability."
      },
      "pushApiSH": {
        "title": "Signal submission (Push API)",
        "description": "The API that allows producers to send data change signals"
      },
      "pullApiSH": {
        "title": "Signal retrieval (Pull API)",
        "description": "The API that allows consumers to retrieve data change signals"
      }
    }
  },
  "consumerDebugVoucher": {
    "edit": {
      "title": "Request data to the server",
      "clientAssertionLabel": "Enter your client assertion (required)",
      "clientIdLabel": "Enter the client ID",
      "description": "The request will be sent to the authorization server endpoint: <strong>{{ authServer }}</strong>",
      "submitBtn": "Send request"
    },
    "result": {
      "newRequestBtn": "Perform new check",
      "alert": {
        "title": "Result of your request",
        "description": {
          "apiSuccess": "This request is valid; it is possible to obtain a voucher for the <strong>PDND APIs</strong>",
          "consumerSuccess": "This request is valid; it is possible to obtain a voucher for the e-service <1>{{eserviceName}}, {{eserviceVersion}}</1>",
          "failed": "It is not possible to obtain a voucher for this request"
        }
      },
      "stepSection": {
        "title": "Debug result",
        "step": {
          "label": {
            "clientAssertionValidation": "1. Client assertion validation",
            "publicKeyRetrieve": "2. Retrieval of the public key stored on PDND",
            "clientAssertionSignatureVerification": "3. Verification of the client assertion signature",
            "platformStatesVerification": "4. Verification of the component states on PDND"
          }
        }
      },
      "requestSection": {
        "title": "Content of your request",
        "description": "Below is the body (payload) of the request that was sent to the PDND authorization server",
        "clientId": {
          "label": "Client_id"
        },
        "clientAssertion": {
          "label": "Client_assertion"
        },
        "clientAssertionType": {
          "label": "Client_assertion_type",
          "description": "The format of the client assertion, as specified in RFC"
        },
        "grantType": {
          "label": "Grant_type",
          "description": "The type of flow used, as specified in RFC"
        }
      },
      "stepDrawer": {
        "title": {
          "clientAssertionValidation": "1. Client assertion validation",
          "publicKeyRetrieve": "2. Retrieval of the public key stored on PDND",
          "clientAssertionSignatureVerification": "3. Verification of the client assertion signature",
          "platformStatesVerification": "4. Verification of the component states on PDND"
        },
        "description": {
          "clientAssertionValidation": "It is verified that the client assertion is well structured. All required fields must be present and correctly filled.",
          "publicKeyRetrieve": "It is verified that the public key corresponding to the kid in the client assertion is present on PDND and can be retrieved.",
          "clientAssertionSignatureVerification": "It is verified that the private key used to sign the client assertion matches the public key identified by the kid and retrieved in step 2.",
          "platformStatesVerification": "It is verified that all administrative and technical components required by PDND are active"
        },
        "stepResultLabel": "Verification result:",
        "nextStepBtn": "Go to next step"
      },
      "chipLabel": {
        "passed": "Passed",
        "skipped": "Unable to execute",
        "failed_one": "{{count}} error",
        "failed_other": "{{count}} errors"
      },
      "errors": {
        "8001": "The string entered as client_id is not a UUID. You can find the correct value in your client page",
        "8002": "The string entered as grant_type is incorrect. It must be client_credentials",
        "8003": "The string entered as client_assertion_type is incorrect. It must be urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
        "8006": "The SUB (subject) claim of the client assertion is not a valid UUID. The subject value is the client ID, which you can find in your client page",
        "8007": "The SUB (subject) claim is missing from the client assertion. The subject value is the client ID, which you can find in your client page",
        "8008": "The SUB (subject) claim in the client assertion does not match the client_id entered in the call to the authorization server",
        "8009": "The string entered as purposeId is not a UUID. You can find the correct value in your client page by selecting the desired purpose",
        "8010": "The AUD (audience) claim does not contain the correct audience",
        "8011": "The hash entered in the value field in the digest does not have the expected length for the SHA256 hashing algorithm",
        "8012": "The hashing of the value field in the digest must be performed using SHA256",
        "8013": "The KID field is missing from the client assertion header",
        "8014": "The ALG field is missing from the client assertion payload",
        "8015": "The JTI field is missing from the client assertion payload",
        "8016": "The IAT field is missing from the client assertion payload",
        "8017": "The ISS field is missing from the client assertion payload",
        "8018": "The EXP field is missing from the client assertion payload",
        "8019": "The digest field in the client assertion payload must contain two fields: alg and value",
        "8020": "The digest field in the client assertion payload must contain two fields: alg and value",
        "8023": "The signature of the client assertion is not valid. Make sure that the private key you used to sign the assertion matches the public key stored on PDND whose kid you indicated",
        "8024": "The purposeId field is missing from the client assertion payload",
        "8025": "The ID of the purpose you indicated (purposeId) does not match any purpose associated with the client ID you indicated",
        "8026": "The client assertion is valid but the purpose for which you are requesting the voucher is not active",
        "8027": "The client assertion is valid but the version of the e-service for which you are requesting the voucher is not active",
        "8028": "The client assertion is valid but the service request for which you are requesting the voucher is not active",
        "8033": "The kid field is not correctly filled. The kid can only contain alphanumeric characters, hyphens, and underscores. The one sent contains unrecognized special characters",
        "8099": "The key ID you indicated (kid) is not part of the client you indicated as client ID"
      }
    }
  }
}
