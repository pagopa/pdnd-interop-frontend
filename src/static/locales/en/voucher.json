{
  "backBtn": "Back",
  "proceedBtn": "Proceed",
  "noPurposesLabel": "This client is not associated with any purposes",
  "noKeysLabel": "This client does not contain any public keys",
  "choosePurposeLabel": "Choose the purpose to use",
  "purposeFailureMessage": "Warning! It will not be possible to obtain a voucher for this purpose. One or more components are currently suspended. Suspended components:",
  "purposeFailureReason": {
    "eservice": "E-service",
    "agreement": "fruition agreement",
    "purpose": "purpose"
  },
  "step1": {
    "stepperLabel": "Parameters selection",
    "title": {
      "API": "Select public key",
      "CONSUMER": "Select purpose and public key"
    },
    "description": "It is used to show you the correct parameters to enhance the client assertion",
    "purposeSelectInput": {
      "label": "Choose the purpose to use"
    },
    "keySelectInput": {
      "label": "Choose the public key to use"
    },
    "goToTechnicalDocsLabel": "Go to the technical documentation",
    "showCurrentSelectionIds": "Show current selection ids",
    "currentIdsDrawer": {
      "title": "View current selection ids",
      "subtitle": "Useful parameters to obtain information through the PDND Interoperabilità APIs. Do you have any doubts? <1>Consult the guide</1>.",
      "eserviceIdDescription": "The id of the e-service connected to the selected purpose",
      "descriptorIdDescription": "The id of the e-service version connected to the selected purpose",
      "agreementIdDescription": "The id of the fruition request connected to the selected purpose",
      "purposeIdDescription": "The id of the selected purpose",
      "clientIdDescription": "The id of this client",
      "producerOrganizationId": {
        "label": "organizationId (provider)",
        "description": "The id of the provider organization"
      },
      "consumerOrganizationId": {
        "label": "organizationId (consumer)",
        "description": "The id of your organization"
      }
    }
  },
  "step2": {
    "stepperLabel": "Client assertion",
    "title": "Client assertion",
    "description": {
      "label": "The first step is to create an assertion that is signed with the private key that corresponds to one of the public keys uploaded for this client. More details to create the JWS below",
      "link": {
        "label": "RFC7521",
        "title": "Link to the spec RFC7521"
      }
    },
    "assertionHeader": {
      "title": "Assertion header",
      "kidField": {
        "label": "KID",
        "description": "The id of the selected key in the previous step.",
        "copySuccessFeedbackText": "Id copied successfully"
      },
      "algField": {
        "label": "ALG",
        "description": "The algorythm that will be used to sign this JWT. Currently only RS256 is available",
        "copySuccessFeedbackText": "Text copied successfully"
      },
      "typField": {
        "label": "TYP",
        "description": "The type of object that can be sent, in this case “JWT”",
        "copySuccessFeedbackText": "Text copied successfully"
      }
    },
    "assertionPayload": {
      "title": "Assertion payload",
      "issField": {
        "label": "ISS",
        "description": "The issuer, in this case the client id",
        "copySuccessFeedbackText": "Id copied successfully"
      },
      "subField": {
        "label": "SUB",
        "description": "The subject, in this case still the client id",
        "copySuccessFeedbackText": "Id copied successfully"
      },
      "audField": {
        "label": "AUD",
        "description": "The audience",
        "copySuccessFeedbackText": "String copied successfully"
      },
      "purposeIdField": {
        "label": "PurposeId",
        "description": "The id of the purpose for which you will request access to the e-service Provider",
        "copySuccessFeedbackText": "Id copied successfully"
      },
      "jtiField": {
        "label": "JTI",
        "description": "The JWT ID, a randomic unique id (uuid) that is generated by who creates the token. It is used to univocally track the token. It is upon the caller to ensure that the id is in fact unique",
        "suggestionLabel": "You must generate this parameter yourself. Example value: 261cd445-3da6-421b-9ef4-7ba556efda5f"
      },
      "iatField": {
        "label": "IAT",
        "description": "Issued at, the timestamp bearing the date and hour when the token was generated. It is expressed in UNIX epoch (numeric value, not a string)",
        "suggestionLabel": "You must generate this parameter yourself. Example value: 1651659340"
      },
      "expField": {
        "label": "EXP",
        "description": "Expiration, the timestamp bearing the date and hour when the token expires. It is expressed in UNIX epoch (numeric value, not a string)",
        "suggestionLabel": "You must generate this parameter yourself. Example value: 1651738540"
      }
    },
    "assertionScript": {
      "title": "Example script to generate an assertion",
      "steps": {
        "1": "Create a folder and name it “client_assertion_test”",
        "2": "Insert the <1>{{ filename }}</1> script into the folder (Python 3.8 is required)",
        "3": "Create a “keys” folder and insert the private key inside, naming it “client-test-keypair.rsa.priv”",
        "4": "Open the terminal and navigate to the client_assertion_test folder",
        "5": "Paste the command below and press enter",
        "result": "This is how you obtain a client assertion signed with your private key. Note: the private key must correspond to the public key you selected in the previous step."
      },
      "exampleLabel": "Usage example"
    }
  },
  "step3": {
    "stepperLabel": "Voucher",
    "title": "Voucher request",
    "consumerDescription": "In the previous step, you obtained a JWS signed with your private key. Now it will be used to make a voucher request towards the Interoperability authorization server. It all is fine, a voucher will be generated. It can be spent on the Provider e-service",
    "apiDescription": "In the previous step, you obtained a JWS signed with your private key. Now it will be used to make a voucher request towards the Interoperability authorization server. It all is fine, a voucher will be generated. It can be spent on the Provider e-service",
    "authEndpoint": {
      "label": "Authorization server endpoint",
      "copySuccessFeedbackText": "URL copied successfully"
    },
    "requestBody": {
      "title": "Request body",
      "clientIdField": {
        "label": "client_id",
        "copySuccessFeedbackText": "Id copied successfully"
      },
      "clientAssertionField": {
        "label": "client_assertion",
        "suggestionLabel": "The JWS obtained at step 1 (starts with “ey”)"
      },
      "clientAssertionTypeField": {
        "label": "client_assertion_type",
        "description": "L’audience di destinazione; in questo caso una risorsa di PDND Interoperabilità",
        "copySuccessFeedbackText": "String copied successfully"
      },
      "grantTypeField": {
        "label": "grant_type",
        "copySuccessFeedbackText": "String copied successfully"
      }
    },
    "voucherScript": {
      "title": "cURL example",
      "guide": "Open the terminal, replace the placeholder LA_TUA_CLIENT_ASSERTION with the assertion you obtained in the previous step and launch the cURL. If you don't have cURL, <1>you can install it</1> from Brew.",
      "exampleLabel": "example cURL"
    },
    "debugVoucherAlert": {
      "description": "Can't get a valid voucher? Try the",
      "link": {
        "label": "debugging functionality"
      }
    }
  },
  "step4": {
    "consumerStepperLabel": "E-service access",
    "apiStepperLabel": "API Interop access",
    "CONSUMER": {
      "title": "Congratulations!",
      "description": "You can access the data made available by the provider.",
      "actionLabel": "Go to the e-service tab"
    },
    "API": {
      "title": "Congratulations!",
      "description": "You can access the PDND Interoperabilità API.",
      "actionLabel": "Download OpenAPI interface"
    }
  },
  "consumerDebugVoucher": {
    "edit": {
      "title": "Server request data",
      "clientAssertionLabel": "Enter your client assertion (required)",
      "clientIdLabel": "Enter the client id",
      "description": "The request will be forwarded to the authorization server endpoint: <strong>{{ authServer }}</strong>",
      "submitBtn": "Submit request"
    },
    "result": {
      "newRequestBtn": "Check again",
      "alert": {
        "title": "Request result",
        "description": {
          "apiSuccess": "This request is valid, you can get a voucher for the <strong>PDND Interoperabilità API</strong>",
          "consumerSuccess": "This request is valid, you can get a voucher for the e-service <1>{{eserviceName}}, {{eserviceVersion}}</1>",
          "failed": "It is not possible to obtain a voucher for this request"
        }
      },
      "stepSection": {
        "title": "Debug result",
        "step": {
          "label": {
            "clientAssertionValidation": "1. Client assertion validation",
            "publicKeyRetrieve": "2. Retrieve of the public key deposited on PDND Interoperabilità",
            "clientAssertionSignatureVerification": "3. Client assertion signature verification",
            "platformStatesVerification": "4. PDND Interoperabilità components states verification"
          }
        }
      },
      "requestSection": {
        "title": "Your request content",
        "description": "Below is the body (payload) of the request that was forwarded to the PDND Interoperabilità authorization server",
        "clientId": {
          "label": "Client_id"
        },
        "clientAssertion": {
          "label": "Client_assertion"
        },
        "clientAssertionType": {
          "label": "Client_assertion_type",
          "description": "Client assertion format, as indicated in the RFC"
        },
        "grantType": {
          "label": "Grant_type",
          "description": "Flow type used, as indicated in the RFC"
        }
      },
      "stepDrawer": {
        "title": {
          "clientAssertionValidation": "1. Client assertion validation",
          "publicKeyRetrieve": "2. Retrieve of the public key deposited on PDND Interoperabilità",
          "clientAssertionSignatureVerification": "3. Client assertion signature verification",
          "platformStatesVerification": "4. PDND Interoperabilità components states verification"
        },
        "description": {
          "clientAssertionValidation": "Check that the client assertion is well structured. All required fields must be present and filled in correctly.",
          "publicKeyRetrieve": "It verifies that the public key corresponding to the kid inserted in the client assertion is present on PDND Interoperabilità and that this is recoverable.",
          "clientAssertionSignatureVerification": "Check that there is a match between the private key with which the client assertion was signed and the public one identified with the kid and recovered in step 2.",
          "platformStatesVerification": "It verifies that all the administrative and technical components of the flow foreseen by PDND Interoperabilità are active"
        },
        "stepResultLabel": "Verification result:",
        "nextStepBtn": "Go to next step"
      },
      "chipLabel": {
        "passed": "Successful",
        "skipped": "Unable to execute",
        "failed_one": "{{count}} error",
        "failed_other": "{{count}} errors"
      },
      "errors": {
        "8001": "String entered as client_id is not a uuid. You find the correct value within your client page",
        "8002": "The string entered as grant_type is incorrect. Must be client_credentials",
        "8003": "The string entered as client_assertion_type is incorrect. Must be urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
        "8006": "The client assertion's claim SUB (subject) is not a valid uuid. The value of the subject is the client id, which you find inside your client page",
        "8007": "The SUB (subject) claim is missing from the client assertion. The value of the subject is the client id, which you find inside your client page",
        "8008": "Il SUB (subject) claim della client assertion non corrisponde al client_id inserito nella chiamata all'authorization server",
        "8009": "String entered as purposeId is not a uuid. Find the correct value on your client's page by selecting the purpose of your interest",
        "8010": "The AUD (audience) claim does not contain the correct audience",
        "8011": "The hash entered in the value field in the digest does not have the length expected by the SHA256 hashing algorithm",
        "8012": "The value field in the digest must be hashed with SHA256",
        "8013": "The KID field is missing from the client assertion header",
        "8014": "The ALG field is missing from the client assertion payload",
        "8015": "The JTI field is missing from the client assertion payload",
        "8016": "The IAT field is missing from the client assertion payload",
        "8017": "The ISS field is missing from the client assertion payload",
        "8018": "The EXP field is missing from the client assertion payload",
        "8019": "The digest field within the client assertion payload must contain two fields: alg and value",
        "8020": "The digest field within the client assertion payload must contain two fields: alg and value",
        "8023": "The client assertion signature is invalid. Make sure that the private key with which you signed the assertion corresponds to the public key deposited on PDND Interoperabilità of which you indicated the kid",
        "8024": "The purposeId field is missing from the client assertion payload",
        "8025": "The purpose id you provided (purposeId) does not match any purpose associated with the client id you provided",
        "8026": "The client assertion is valid but the purpose for which you are requesting the voucher is not active",
        "8027": "The client assertion is valid but the e-service version for which you are requesting the voucher is not active",
        "8028": "The client assertion is valid but the agreement for which you are requesting the voucher is not active",
        "8033": "The kid field is not filled in correctly. The kid can only consist of alphanumeric characters, hyphens and underscores. The one sent contains unrecognized special characters",
        "8099": "The key id you specified (kid) is not part of the client you specified as client id"
      }
    }
  }
}
